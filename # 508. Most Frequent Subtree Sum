/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
	HashMap<Integer, Integer> ans = new HashMap<>();
	int max = 0;

	public int[] findFrequentTreeSum(TreeNode root) {
		getAns(root);
		List<Integer> res = new ArrayList<>();
		for (int i : ans.keySet()) {
			if (ans.get(i) == max) {
				res.add(i);
			}
		}
		int[] ret = new int[res.size()];
		int j = 0;
		for (int m : res) {
			ret[j] = m;
			j++;
		}
		return ret;
	}

	private int getAns(TreeNode root) {
		if (root == null) {
			return 0;
		} else if (root.left == null && root.right == null) {
			ans.put(root.val, ans.getOrDefault(root.val, 0) + 1);
			max = Math.max(max, ans.get(root.val));
			return root.val;
		} else {
			int thisone = root.val + getAns(root.left) + getAns(root.right);
			ans.put(thisone, ans.getOrDefault(thisone, 0) + 1);
			max = Math.max(max, ans.get(thisone));
			return thisone;
		}
	}
}
