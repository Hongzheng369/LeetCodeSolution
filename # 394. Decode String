// 说用递归做，就用递归做

class Solution {
	public String decodeString(String s) {
		int i = 0;
		StringBuilder ans = new StringBuilder(), count = new StringBuilder();
		while (i < s.length()) {
			if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
				count.append(s.charAt(i));
				i++;
			} else if (s.charAt(i) == '[') {
				int j = i + 1, sub = 1;
				while (sub != 0) {
					j++;
					if (s.charAt(j) == ']') {
						sub--;
					} else if (s.charAt(j) == '[') {
						sub++;
					}
				}
				int times = (count.length() != 0) ? Integer.valueOf(count.toString()) : 1;
				for (; times > 0; times--) {
					ans.append(decodeString(s.substring(i + 1, j)));
				}
				count = new StringBuilder();
				i = j + 1;
			} else {
				ans.append(s.charAt(i));
				i++;
			}
		}
		return ans.toString();
	}
}
